// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN // Le créateur de la clinique
  MEDECIN
  INFIRMIER
  ADMINISTRATIF
  AUTRE
}

enum ModuleNom {
  PHARMACIE
  COMPTABILITE
  LABORATOIRE
}

enum StatutAgenda {
  CONFIRME
  PAYE
  ANNULE
  EN_ATTENTE
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  nom            String
  image          String?
  telephone      String?
  supabaseUserId String?  @unique // ID utilisateur venant de Supabase Auth
  createdAt      DateTime @default(now())
  role           Role     @default(AUTRE)

  cliniqueId String?
  clinique   Clinique? @relation("UserToClinique", fields: [cliniqueId], references: [id])

  createdClinique Clinique? @relation("CliniqueAdmin")

  invitations   Invitation[]
  specialites   Specialite[]   @relation("UserSpecialites")
  soins         Soin[]         @relation("UserSoins")
  consultations Consultation[]
  agendas       Agenda[]
}

model Clinique {
  id        String  @id @default(uuid())
  nom       String
  adresse   String
  telephone String
  statut    Boolean @default(true)

  utilisateurId  String @unique
  administrateur User   @relation("CliniqueAdmin", fields: [utilisateurId], references: [id])

  specialites Specialite[]

  personnel        User[]            @relation("UserToClinique")
  invitations      Invitation[]
  modules          Module[]
  patients         Patient[]
  medicaments      Medicament[]
  stockMedicaments StockMedicament[]
  historiqueAchats HistoriqueAchat[]
  ventes           Vente[]
  comptabilites    Comptabilite[]
  departements     Departement[]
  factures Facture[]
}

model Invitation {
  id           String      @id @default(uuid())
  email        String
  nom          String?
  telephone    String? // idem
  role         Role
  specialiteId String?
  specialite   Specialite? @relation(fields: [specialiteId], references: [id])
  cliniqueId   String
  clinique     Clinique    @relation(fields: [cliniqueId], references: [id])
  invitedById  String
  invitedBy    User        @relation(fields: [invitedById], references: [id])
  accepted     Boolean     @default(false)
  token        String      @unique @default(uuid())
  createdAt    DateTime    @default(now())
}

model Specialite {
  id          String  @id @default(uuid())
  nom         String
  description String?

  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id])

  invitations Invitation[]

  users User[] @relation("UserSpecialites")

  soins Soin[]

  @@unique([nom, cliniqueId]) // ✅ Ajouté ici
}

model Soin {
  id           String     @id @default(uuid())
  nom          String
  description  String?
  prix         Float?
  specialiteId String
  specialite   Specialite @relation(fields: [specialiteId], references: [id])

  // Médecins pratiquant ce soin
  users User[] @relation("UserSoins")

  detailsFacture DetailFacture[] 

  agendaSoins AgendaSoin[]
  consultationSoins ConsultationSoin[]
}

model Module {
  id         String    @id @default(uuid())
  nom        ModuleNom
  actif      Boolean   @default(true)
  cliniqueId String
  clinique   Clinique  @relation(fields: [cliniqueId], references: [id], onDelete: Cascade)

  @@unique([nom, cliniqueId])
}

model Departement {
  id         String   @id @default(uuid())
  nom        String
  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id])
}

model Patient {
  id         String   @id @default(uuid())
  nom        String
  prenom     String
  age        Int
  telephone  String
  adresse    String
  createdAt      DateTime @default(now())
  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id])

  consultations Consultation[]
  agendas       Agenda[]

  parametresVitaux ParametresVitaux[]
  Facture          Facture[]
}

model ParametresVitaux {
  id             String  @id @default(uuid())
  patientId      String
  consultationId String?

  patient      Patient       @relation(fields: [patientId], references: [id])
  consultation Consultation? @relation(fields: [consultationId], references: [id])

  date        DateTime @default(now())
  temperature Float
  tension     String
  poids       Float
}

model Medicament {
  id          String   @id @default(uuid())
  nom         String
  description String
  prix        Float
  cliniqueId  String
  clinique    Clinique @relation(fields: [cliniqueId], references: [id])

  stock              StockMedicament?
  historiqueAchats   HistoriqueAchat[]
  detailVentes       DetailVente[]
}

model StockMedicament {
  id            String     @id @default(uuid())
  stock_courant Int
  medicamentId  String     @unique
  medicament    Medicament @relation(fields: [medicamentId], references: [id])
  cliniqueId    String
  clinique      Clinique   @relation(fields: [cliniqueId], references: [id])
}

model HistoriqueAchat {
  id            String     @id @default(uuid())
  date_achat    DateTime
  quantite      Int
  prix_unitaire Float
  medicamentId  String
  medicament    Medicament @relation(fields: [medicamentId], references: [id])
  cliniqueId    String
  clinique      Clinique   @relation(fields: [cliniqueId], references: [id])
}

model Vente {
  id           String        @id @default(uuid())
  date_vente   DateTime
  total        Float
  cliniqueId   String
  clinique     Clinique      @relation(fields: [cliniqueId], references: [id])
  detailVentes DetailVente[]
}

model DetailVente {
  id            String     @id @default(uuid())
  quantite      Int
  prix_unitaire Float
  venteId       String
  medicamentId  String
  vente         Vente      @relation(fields: [venteId], references: [id])
  medicament    Medicament @relation(fields: [medicamentId], references: [id])
}

model Comptabilite {
  id         String   @id @default(uuid())
  mois       Int
  annee      Int
  revenu     Float
  depense    Float
  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id], onDelete: Cascade)
}

model Consultation {
  id        String   @id @default(uuid())
  date      DateTime
  patientId String
  userId    String

  patient Patient @relation(fields: [patientId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  consultationSoins ConsultationSoin[] 

  parametresVitaux ParametresVitaux[]

  prescription Prescription? // relation vers Prescription

  fichier String?

  // Relation 1:1 vers Facture (clé étrangère dans Consultation)
  facture   Facture? @relation("ConsultationFacture", fields: [factureId], references: [id])
  factureId String?  @unique
}

model ConsultationSoin {
  id             String        @id @default(uuid())
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  consultationId String
  soin           Soin         @relation(fields: [soinId], references: [id])
  soinId         String

  @@unique([consultationId, soinId]) // Pour éviter les doublons
}

model Prescription {
  id             String       @id @default(uuid())
  consultationId String       @unique
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  date           DateTime     @default(now())
  remarque       String?      // suffit pour noter les prescriptions en texte libre
}

model Facture {
  id         String           @id @default(uuid())
  patientId  String
  cliniqueId String           // pour récupérer nom, adresse, téléphone
  date       DateTime         @default(now())

  agendaId   String?          @unique
  agenda     Agenda?          @relation("AgendaFacture", fields: [agendaId], references: [id])

  consultation Consultation?  @relation("ConsultationFacture")

  patient    Patient          @relation(fields: [patientId], references: [id])
  clinique   Clinique         @relation(fields: [cliniqueId], references: [id])

  details    DetailFacture[]  // plusieurs soins facturés
  prix       Float
}

model DetailFacture {
  id         String   @id @default(uuid())
  factureId  String
  soinId     String
  prix       Float    // prix au moment de la facturation

  facture    Facture  @relation(fields: [factureId], references: [id])
  soin       Soin     @relation(fields: [soinId], references: [id])
}

model Agenda {
  id        String       @id @default(uuid())
  date      DateTime     
  patientId String       
  userId    String       
  statut    StatutAgenda 

  patient Patient @relation(fields: [patientId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  facture   Facture? @relation("AgendaFacture")
  factureId String?

  agendaSoins AgendaSoin[]
    @@index([date])
  @@index([patientId])
  @@index([userId])
  @@index([statut])
}

model AgendaSoin {
  id        String  @id @default(uuid())
  agenda    Agenda  @relation(fields: [agendaId], references: [id])
  agendaId  String
  soin      Soin    @relation(fields: [soinId], references: [id])
  soinId    String

  @@unique([agendaId, soinId]) // empêche les doublons
}