// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN // Le créateur de la clinique
  MEDECIN
  INFIRMIER
  ADMINISTRATIF
  LABORANTIN
  PHARMACIEN
  COMPTABLE
  AUTRE
}

enum Paiement {
  ESPECE
  ESPECE_ORANGE_MONEY
  ESPECE_MOOV_MONEY
  ESPECE_WAVE
  ORANGE_MONEY
  MOOV_MONEY
  WAVE
  COMPTE_BANCAIRE
}

enum ModuleNom {
  PHARMACIE
  COMPTABILITE
  LABORATOIRE
}

enum StatutAgenda {
  CONFIRME
  ANNULE
  EN_ATTENTE
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  nom            String
  image          String?
  telephone      String?
  supabaseUserId String?  @unique // ID utilisateur venant de Supabase Auth
  createdAt      DateTime @default(now())
  role           Role     @default(AUTRE)

  cliniqueId String?
  clinique   Clinique? @relation("UserToClinique", fields: [cliniqueId], references: [id])

  createdClinique Clinique? @relation("CliniqueAdmin")

  invitations Invitation[]
  specialites Specialite[] @relation("UserSpecialites")
  soins       Soin[]       @relation("UserSoins")
  agendas     Agenda[]
}

model Clinique {
  id        String  @id @default(uuid())
  nom       String
  adresse   String
  telephone String
  statut    Boolean @default(true)

  utilisateurId  String @unique
  administrateur User   @relation("CliniqueAdmin", fields: [utilisateurId], references: [id])

  specialites Specialite[]

  personnel        User[]            @relation("UserToClinique")
  invitations      Invitation[]
  modules          Module[]
  patients         Patient[]
  medicaments      Medicament[]
  historiqueAchats HistoriqueAchat[]
  ventes           Vente[]
  comptabilites    Comptabilite[]
  departements     Departement[]
  stockLots        StockLot[]
  factures         Facture[]
}

model Invitation {
  id           String      @id @default(uuid())
  email        String
  nom          String?
  telephone    String? // idem
  role         Role
  specialiteId String?
  specialite   Specialite? @relation(fields: [specialiteId], references: [id])
  cliniqueId   String
  clinique     Clinique    @relation(fields: [cliniqueId], references: [id])
  invitedById  String
  invitedBy    User        @relation(fields: [invitedById], references: [id])
  accepted     Boolean     @default(false)
  token        String      @unique @default(uuid())
  createdAt    DateTime    @default(now())
}

model Specialite {
  id          String  @id @default(uuid())
  nom         String
  description String?

  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id])

  invitations Invitation[]

  users User[] @relation("UserSpecialites")

  soins Soin[]

  @@unique([nom, cliniqueId]) // ✅ Ajouté ici
}

model Soin {
  id           String     @id @default(uuid())
  nom          String
  description  String?
  prix         Float?
  specialiteId String
  specialite   Specialite @relation(fields: [specialiteId], references: [id])

  // Médecins pratiquant ce soin
  users User[] @relation("UserSoins")

  detailsFacture DetailFacture[]

  agendaSoins AgendaSoin[]
}

model Module {
  id         String    @id @default(uuid())
  nom        ModuleNom
  actif      Boolean   @default(true)
  cliniqueId String
  clinique   Clinique  @relation(fields: [cliniqueId], references: [id], onDelete: Cascade)

  @@unique([nom, cliniqueId])
}

model Departement {
  id         String   @id @default(uuid())
  nom        String
  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id])
}

model Patient {
  id         String   @id @default(uuid())
  nom        String
  prenom     String
  age        Int
  telephone  String
  adresse    String
  createdAt  DateTime @default(now())
  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id])

  agendas Agenda[]

  parametresVitaux ParametresVitaux[]
  Facture          Facture[]
}

model ParametresVitaux {
  id        String  @id @default(uuid())
  patientId String
  agendaId  String?

  patient Patient @relation(fields: [patientId], references: [id])
  agenda  Agenda? @relation(fields: [agendaId], references: [id])

  date        DateTime @default(now())
  temperature Float
  tension     String
  poids       Float
}

model CatalogueMedicament {
  id            String  @id @default(uuid())
  nom           String
  forme         String 
  dosage_valeur Float 
  dosage_unite  String 
  laboratoire   String
  code_barre    String? @unique 

  medicaments Medicament[]
}

model Medicament {
  id         String   @id @default(uuid())
  prix       Float // prix par unité (valeur par défaut)
  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id])

  catalogueMedId String
  catalogueMed   CatalogueMedicament @relation(fields: [catalogueMedId], references: [id])

  stockLots        StockLot[]
  historiqueAchats HistoriqueAchat[]
  detailVentes     DetailVente[]
}

model StockLot {
  id              String   @id @default(uuid())
  date_peremption DateTime
  quantite        Int

  medicamentId String
  medicament   Medicament @relation(fields: [medicamentId], references: [id])

  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id])

  createdAt DateTime @default(now())
}

model HistoriqueAchat {
  id            String     @id @default(uuid())
  date_achat    DateTime
  quantite      Int
  prix_unitaire Float
  medicamentId  String
  medicament    Medicament @relation(fields: [medicamentId], references: [id])
  cliniqueId    String
  clinique      Clinique   @relation(fields: [cliniqueId], references: [id])
}

model Vente {
  id           String        @id @default(uuid())
  date_vente   DateTime
  total        Float
  cliniqueId   String
  clinique     Clinique      @relation(fields: [cliniqueId], references: [id])
  detailVentes DetailVente[]
  mode         Paiement
}

model DetailVente {
  id            String     @id @default(uuid())
  quantite      Int
  prix_unitaire Float
  venteId       String
  medicamentId  String
  vente         Vente      @relation(fields: [venteId], references: [id])
  medicament    Medicament @relation(fields: [medicamentId], references: [id])
}

model Comptabilite {
  id         String   @id @default(uuid())
  mois       Int
  annee      Int
  revenu     Float
  depense    Float
  cliniqueId String
  clinique   Clinique @relation(fields: [cliniqueId], references: [id], onDelete: Cascade)
}

model Prescription {
  id       String   @id @default(uuid())
  agendaId String?  @unique
  agenda   Agenda?  @relation(fields: [agendaId], references: [id])
  date     DateTime @default(now())
  remarque String?
}

model Facture {
  id         String   @id @default(uuid())
  patientId  String
  cliniqueId String // pour récupérer nom, adresse, téléphone
  date       DateTime @default(now())

  agendaId String? @unique
  agenda   Agenda? @relation("AgendaFacture", fields: [agendaId], references: [id])

  patient  Patient  @relation(fields: [patientId], references: [id])
  clinique Clinique @relation(fields: [cliniqueId], references: [id])

  details DetailFacture[] // plusieurs soins facturés
  prix    Float
}

model DetailFacture {
  id        String @id @default(uuid())
  factureId String
  soinId    String
  prix      Float // prix au moment de la facturation

  facture Facture @relation(fields: [factureId], references: [id])
  soin    Soin    @relation(fields: [soinId], references: [id])
}

model Agenda {
  id        String       @id @default(uuid())
  date      DateTime
  patientId String
  userId    String
  statut    StatutAgenda

  fichier String?

  patient Patient @relation(fields: [patientId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  parametresVitaux ParametresVitaux[]

  prescription Prescription?

  facture   Facture? @relation("AgendaFacture")
  factureId String?

  agendaSoins AgendaSoin[]
}

model AgendaSoin {
  id       String @id @default(uuid())
  agenda   Agenda @relation(fields: [agendaId], references: [id])
  agendaId String
  soin     Soin   @relation(fields: [soinId], references: [id])
  soinId   String

  @@unique([agendaId, soinId]) // empêche les doublons
}
